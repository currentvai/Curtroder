#!/data/data/com.termux/files/usr/bin/bash

# Curtroder Installer
# Author: Current Vai ♚ (Concept) & AI Assistant (Scripting)

# --- Welcome Banner for Installer ---
clear
echo -e "\e[1;32mWelcome to the Curtroder Theme Installer!\e[0m"
echo "This script will set up a dynamic banner and prompt for your Termux."
echo ""

# --- Dependency Installation ---
echo -e "\e[1;33m[*] Checking and installing required packages...\e[0m"

# List of packages to install
PACKAGES="figlet curl mpv"

for pkg in $PACKAGES; do
    if ! dpkg -s "$pkg" &>/dev/null; then
        echo -e "\e[1;34m[>] Installing $pkg...\e[0m"
        pkg install "$pkg" -y > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo -e "\e[1;31m[ERROR] Failed to install $pkg. Please check your internet connection and try again.\e[0m"
            echo -e "\e[1;31m[!] Aborting installation.\e[0m"
            exit 1
        else
            echo -e "\e[1;32m[+] $pkg installed successfully.\e[0m"
        fi
    else
        echo -e "\e[1;32m[+] $pkg is already installed.\e[0m"
    fi
done
echo -e "\e[1;32m[+] All dependencies are satisfied.\e[0m"
echo ""

# --- Get User's Name ---
user_name=""
while [ -z "$user_name" ]; do
    read -p $'\e[1;33m[*] Please enter the name you want to display (cannot be empty): \e[0m' user_name
    if [ -z "$user_name" ]; then
        echo -e "\e[1;31m[!] Name cannot be empty. Using default name 'User'.\e[0m"
        user_name="User" # If empty, use default 'User'
    fi
done
echo ""

# --- Generate ASCII Art from Name ---
# Using figlet to generate the banner text
# The "-f standard" flag uses a font similar to your original banner
ascii_art=$(figlet -f standard "$user_name")

# --- Backup existing .bashrc ---
if [ -f "$HOME/.bashrc" ]; then
    echo -e "\e[1;33m[*] Backing up your existing .bashrc to .bashrc.bak...\e[0m"
    mv "$HOME/.bashrc" "$HOME/.bashrc.bak"
else
    echo -e "\e[1;33m[*] No existing .bashrc found to backup.\e[0m"
fi

# --- Create the new .bashrc file using a Here Document ---
echo -e "\e[1;33m[*] Creating new custom .bashrc file...\e[0m"

# Define the URL for your loading sound file
# IMPORTANT: Replace with your actual sound file URL
# Example: Use a public CDN or your own server to host a small MP3/WAV file.
SOUND_FILE_URL="https://example.com/path/to/your/loading_sound.mp3" # <--- IMPORTANT: Change this URL
SOUND_FILE="$HOME/.termux/curtroder_load.mp3"

# Create .termux directory if it doesn't exist
mkdir -p "$HOME/.termux"

echo -e "\e[1;33m[*] Attempting to download loading sound file...\e[0m"
# Check if mpv is installed before attempting to download sound
if dpkg -s "mpv" &>/dev/null; then
    curl -s -o "$SOUND_FILE" "$SOUND_FILE_URL"
    if [ $? -ne 0 ] || [ ! -f "$SOUND_FILE" ]; then
        echo -e "\e[1;31m[!] Failed to download sound file. Loading sound will not play.\e[0m"
        SOUND_FILE="false" # Indicate that sound file is not available
    else
        echo -e "\e[1;32m[+] Loading sound file downloaded successfully.\e[0m"
    fi
else
    echo -e "\e[1;31m[!] mpv is not installed. Skipping sound file download.\e[0m"
    SOUND_FILE="false"
fi


cat > "$HOME/.bashrc" << EOF
# ~/.bashrc - Generated by Curtroder

# --- Step 1: Loading Animation ---
clear
# Play sound if mpv is installed and sound file exists
if command -v mpv >/dev/null 2>&1 && [ -f "$SOUND_FILE" ]; then
    # --no-terminal prevents mpv from taking over the terminal
    # --volume=50 sets volume to 50%
    # & plays in background, allowing animation to proceed
    mpv --no-terminal --volume=50 "$SOUND_FILE" > /dev/null 2>&1 &
fi

echo -e "\e[1;32m$user_name ♚\e[0m"
echo -e "\e[1;33mPlease wait a moment. system is loading...\e[0m"
echo ""
echo -n -e "\e[1;31m#loading [\e[0m"
for i in {1..20}; do
    echo -n -e "\e[1;32m█\e[0m"
    sleep 0.1
done
echo -e "\e[1;31m] #Done\e[0m"
sleep 1
clear

# --- Step 2: Welcome Message ---
echo -e "\e[1;32mWelcome $user_name ♚\e[0m"
echo -e "\e[1;36mSystem is ready.\e[0m"
echo -e "\e[1;32mNow you can complete your mission.\e[0m"
echo ""

# --- Step 3: The Pinned Banner Function ---
display_banner() {
    COLUMNS=\$(tput cols) # Get current terminal width

    # Function to center text based on terminal width, ignoring color codes
    center_text() {
        text="\$1"
        # Remove ANSI color codes for accurate length calculation
        plain_text=\$(echo -e "\$text" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")
        printf "%*s\n" \$(( ((\${#plain_text} + COLUMNS) / 2) )) "\$text"
    }

    # The ASCII Art Banner (Dynamically generated)
    echo -e "\e[1;36m" # Set color for the whole ASCII art block
    echo "$ascii_art" | while IFS= read -r line; do
        center_text "\$line"
    done
    echo -e "\e[0m" # Reset color after the block

    # Developer Info - Each line gets its own color and is centered
    center_text "\e[1;34mDevoloped By Current Vai ♚ | Curtroder v1.0\e[0m"
    center_text "\e[1;33m© Copyright \$(date +%Y) — All Rights Reserved.\e[0m"
    center_text "\e[1;31m\"I am completely destroyed. Error 304 Not Modified.\"\e[0m"
    
    # Dynamic Info: IP and Date
    echo "" # Empty line for spacing
    center_text "\e[91m📅 \$(date +"%A, %d %B %Y") | ⏰ \$(date +"%I:%M %p")\e[0m"
    
    if command -v curl >/dev/null 2>&1; then
      IP=\$(curl -s ifconfig.me)
    else
      IP="(curl not found)"
    fi
    center_text "\e[92m🌐 IP Address:\e[0m \$IP"
    echo ""
}

# --- Pinned Banner Magic ---
# This redefines 'clear' command to also display the banner
clear() {
    /data/data/com.termux/files/usr/bin/clear
    display_banner
}

# --- Step 4: Custom Command Prompt (PS1) ---
# Optimized PS1 with less repetitive color codes
PS1='\e[36m┌─[\e[32m\t\e[36m]─[\e[32m$user_name@Curtroder\e[36m]──[\e[34m\w\e[36m]\n└─> \e[0m'

# --- Final step: Show the banner for the first time ---
display_banner

EOF

# --- Final Success Message ---
echo ""
echo -e "\e[1;32m[SUCCESS] Curtroder theme has been installed successfully!\e[0m"
echo "Please restart your Termux session (close and reopen the app) to see the changes."
echo "Your old .bashrc was saved as .bashrc.bak"
