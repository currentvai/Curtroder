#!/data/data/com.termux/files/usr/bin/bash

# Curtroder Installer
# Author: Current Vai ♚ (Concept) & AI Assistant (Scripting)

# --- Welcome Banner for Installer ---
clear
echo -e "\e[1;32mWelcome to the Curtroder Theme Installer!\e[0m"
echo "This script will set up a dynamic banner and prompt for your Termux."
echo ""

# --- Dependency Check ---
echo -e "\e[1;33m[*] Checking for required packages...\e[0m"
REQUIRED_PKGS="figlet curl"
MISSING_PKGS=""

for pkg in $REQUIRED_PKGS; do
    if ! pkg show "$pkg" &> /dev/null; then
        MISSING_PKGS+=" $pkg"
    fi
done

if [ -n "$MISSING_PKGS" ]; then
    echo -e "\e[1;33m[!] The following packages are missing: $MISSING_PKGS\e[0m"
    echo -e "\e[1;33m[*] Installing missing packages...\e[0m"
    pkg install $MISSING_PKGS -y
    if [ $? -ne 0 ]; then
        echo -e "\e[1;31m[ERROR] Failed to install one or more required packages. Please check your internet connection or try again later.\e[0m"
        exit 1
    fi
fi
echo -e "\e[1;32m[+] All dependencies are satisfied.\e[0m"
echo ""

# --- Get User's Name ---
read -p $'\e[1;33m[*] Please enter the name you want to display: \e[0m' user_name

# If user enters nothing, use a default name
if [ -z "$user_name" ]; then
    user_name="User"
    echo -e "\e[1;31m[!] No name entered. Using default name 'User'.\e[0m"
fi
echo ""

# --- Generate ASCII Art from Name ---
# Using figlet to generate the banner text
# The "-f standard" flag uses a font similar to your original banner
# We'll check if figlet is truly available before calling it
if command -v figlet &> /dev/null; then
    ascii_art=$(figlet -f standard "$user_name")
else
    ascii_art=">>> $user_name's Termux <<<" # Fallback if figlet somehow failed
    echo -e "\e[1;31m[WARNING] figlet not found, using a simpler banner.\e[0m"
fi


# --- Backup existing .bashrc ---
if [ -f "$HOME/.bashrc" ]; then
    echo -e "\e[1;33m[*] Backing up your existing .bashrc to .bashrc.bak...\e[0m"
    mv "$HOME/.bashrc" "$HOME/.bashrc.bak"
    echo -e "\e[1;32m[+] Old .bashrc backed up.\e[0m"
else
    echo -e "\e[1;33m[*] No existing .bashrc found to back up.\e[0m"
fi
echo ""

# --- Create the new .bashrc file using a Here Document ---
echo -e "\e[1;33m[*] Creating new custom .bashrc file...\e[0m"

# The 'EOF' here document allows us to write a multi-line string to a file.
# Variables like $user_name and $ascii_art will be replaced with their values.
cat > "$HOME/.bashrc" << EOF
# ~/.bashrc - Generated by Curtroder

# --- Step 1: Loading Animation ---
# Check if this is an interactive shell, to avoid animation in non-interactive sessions
if [[ -o interactive ]]; then
    clear
    echo -e "\e[1;32m$user_name ♚\e[0m"
    echo -e "\e[1;33mPlease wait a moment. system is loading...\e[0m"
    echo ""
    echo -n -e "\e[1;31m#loading [\e[0m"
    for i in {1..20}; do
        echo -n -e "\e[1;32m█\e[0m"
        sleep 0.1
    done
    echo -e "\e[1;31m] #Done\e[0m"
    sleep 1
    /data/data/com.termux/files/usr/bin/clear # Use absolute path to original clear
fi

# --- Step 2: Welcome Message ---
echo -e "\e[1;32mWelcome $user_name ♚\e[0m"
echo -e "\e[1;36mSystem is ready.\e[0m"
echo -e "\e[1;32mNow you can complete your mission.\e[0m"
echo ""

# --- Step 3: The Pinned Banner Function ---
display_banner() {
        # Centering helper function
        center_text() {
                local term_width text line pad
                # Use COLUMNS variable if available, fallback to tput, then default 80
                term_width=\${COLUMNS:-$(tput cols 2>/dev/null || echo 80)}
                while IFS= read -r line; do
                        # Remove ANSI escape codes for length calculation
                        text_plain=\$(echo -e "$line" | sed 's/\x1b\[[0-9;]*m//g')
                        pad=\$(( (term_width - \${#text_plain}) / 2 ))
                        [ \$pad -gt 0 ] && printf "%*s" \$pad ''
                        echo -e "$line" # Print original line with colors
                done
        }

        # The ASCII Art Banner (Dynamically generated)
        echo -e "\e[1;36m"
        echo "$ascii_art" | center_text
        echo -e "\e[0m"

        # Developer Info
        echo -e "\e[1;34m\$(center_text <<< 'Devoloped By Current Vai ♚ | Curtroder v1.0')\e[0m"
        echo -e "\e[1;33m\$(center_text <<< "© Copyright \$(date +%Y) — All Rights Reserved.")\e[0m"
        echo -e "\e[1;31m\$(center_text <<< '"I am completely destroyed. Error 304 Not Modified."')\e[0m"

        # Dynamic Info: IP and Date
        echo -e "\n\e[91m\$(center_text <<< "📅 \$(date +"%A, %d %B %Y") | ⏰ \$(date +"%I:%M %p")")\e[0m"

        # Check for curl before attempting to get IP
        if command -v curl >/dev/null 2>&1; then
            IP=\$(curl -s ifconfig.me)
        else
            IP="(Install 'curl' for IP)" # More informative message
        fi
        echo -e "\e[92m\$(center_text <<< "🌐 IP Address: \$IP")\e[0m"
        echo ""
}

# --- Pinned Banner Magic (Alias for clear) ---
# Instead of redefining clear, create an alias 'cb' for clear banner
# This allows users to clear normally or with the banner.
alias clear='/data/data/com.termux/files/usr/bin/clear'
alias cb='clear && display_banner'

# --- Step 4: Custom Command Prompt (PS1) ---
PS1='\[\e[36m\]┌─[\[\e[32m\]\t\[\e[36m\]]─[\[\e[32m\]$user_name@Curtroder\[\e[36m\]]──[\[\e[34m\]\w\[\e[36m\]]
\[\e[36m\]└─> \[\e[0m\]'

# --- Final step: Show the banner for the first time ---
# Only display banner at the start of an interactive shell
if [[ -o interactive ]]; then
    display_banner
fi

EOF

# --- Final Success Message ---
echo ""
echo -e "\e[1;32m[SUCCESS] Curtroder theme has been installed successfully!\e[0m"
echo "Please restart your Termux session to see the changes."
echo "Your old .bashrc was saved as .bashrc.bak"
echo -e "\e[1;36mTip: Type 'cb' (clear banner) to clear screen and show banner.\e[0m"
